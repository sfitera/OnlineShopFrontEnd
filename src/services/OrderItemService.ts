import axios from 'axios'
import { OrderItem } from '../models/OrderItem'
import { useCartStore } from '@/stores/cartStore'

const orderItemUrl = 'http://localhost:8080/api/orderitem/'

export class OrderItemService {
  async addOrderItem(orderItem: OrderItem): Promise<OrderItem> {
    try {
      const response = await axios.post(`${orderItemUrl}add/`, orderItem, {
        headers: { 'Content-Type': 'application/json' }
      });

      console.log("üì° Odpoveƒè zo servera (pridanie do ko≈°√≠ka):", response.data);

      if (!response.data || !response.data.product) {
        console.error("‚ùå Chyba: Backend nevr√°til platn√Ω objekt `OrderItem`!", response.data);
        return Promise.reject("Backend nevr√°til platn√Ω produkt.");
      }

      return response.data;
    } catch (error) {
      console.error("‚ùå Chyba pri prid√°van√≠ do ko≈°√≠ka:", error);
      throw error;
    }
  }


  async updateOrderItem(orderItem: OrderItem): Promise<void> {
    console.log("üõí PATCH Aktualizujem OrderItem:", orderItem);
    const cartStore = useCartStore();
    try {
      const response = await axios.patch(
        `${orderItemUrl}update/${orderItem.id}`,
        { quantity: orderItem.quantity }
      );
      console.log("‚úÖ OrderItem √∫spe≈°ne aktualizovan√Ω:", response.data);
    } catch (error: any) {
      if (error.response && error.response.status === 404) {
        console.warn(`‚ö†Ô∏è Polo≈æka ${orderItem.id} neexistuje v datab√°ze. Odstr√°nim ju z ko≈°√≠ka.`);
        cartStore.orderItems = cartStore.orderItems.filter(i => i.id !== orderItem.id);
        cartStore.updateCart();
      } else {
        console.error(`‚ùå Chyba pri aktualiz√°cii polo≈æky ${orderItem.id}:`, error);
      }
    }
  }


  async deleteOrderItem(id: number): Promise<void> {
    const cartStore = useCartStore(); // Zavolaj useCartStore() vn√∫tri met√≥dy
    try {
      await axios.delete(`${orderItemUrl}delete/${id}`);
      console.log(`‚úÖ Polo≈æka odstr√°nen√°: ${id}`);

      const newItems = cartStore.orderItems.filter(item => item.id !== id);
      cartStore.setCartItems([...newItems]);
    } catch (error: any) {
      console.error(`‚ùå Chyba pri odstra≈àovan√≠ polo≈æky ${id}:`, error);
    }
  }







  async getOrderItemById(id: number): Promise<OrderItem> {
    const response = await axios.get(`${orderItemUrl}${id}`, {
      headers: {
        'Content-Type': 'application/json',
      },
    })
    return response.data
  }

  async getOrderItems(): Promise<OrderItem[]> {
    try {
      const response = await axios.get(orderItemUrl);
      console.log("üì° API odpoveƒè (polo≈æky ko≈°√≠ka):", response.data);

      if (response.data && response.data.length > 0) {
        return response.data;
      }

      return []; // Ak API nevr√°ti niƒç, vr√°≈• pr√°zdne pole (nechaj Vue to spracova≈• spr√°vne)
    } catch (error) {
      console.error("‚ùå Chyba pri naƒç√≠tan√≠ polo≈æiek ko≈°√≠ka:", error);
      return [];
    }
  }




  async clearCart(userId: number): Promise<void> {
    await axios.delete(`${orderItemUrl}clear-cart/${userId}`, {
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }
}
